TC = O(N)
SC = O(N)

class BSTIterator {
public:
    vector<int>inorder1;
    vector<int>inorder(TreeNode* root){
        if(root == NULL) return inorder1;
        inorder(root->left);
        inorder1.push_back(root->val);
        inorder(root->right);
        return inorder1;
    }
    int i = 0;
    vector<int>inorder2;
    BSTIterator(TreeNode* root) {
        inorder2 = inorder(root);

        
    }
    
    int next() {
        int a =  inorder2[i];
        i++;
        return a;
        
    }
    
    bool hasNext() {
        if(i>=inorder2.size()) return false;
        return true;
        
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
 
 
 
 Stack Approach
 TC = O(1)
 SC = O(height of BST)
 
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    stack<TreeNode* > st;
public:

    BSTIterator(TreeNode* root) {
        pushAll(root);
        
    }
    
    int next() {
        TreeNode* topNode = st.top();
        st.pop();
        pushAll(topNode->right);
        return topNode->val;
        
    }
    
    bool hasNext() {
        if(st.empty()== true) return false;
        return true;
        
    }
private:
    void pushAll(TreeNode* node){
        while(node!=NULL){
            st.push(node);
            node= node->left;
        }
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
