TC =O(n)
SC = O(N)

Naive Approach

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>pres;
    vector<int>pre(TreeNode* root){
        
        if(root==NULL){
            return pres;
        }
        pres.push_back(root->val);
        pre(root->left);
        pre(root->right);
        return pres;
    }
    int kthSmallest(TreeNode* root, int k) {
        int ans1;
        vector<int>ans;
        ans = pre(root);
        sort(ans.begin(),ans.end());
        for(int i =0; i<ans.size(); i++){
            if(i+1==k){
                ans1 = ans[i];

            }
        }
        return ans1;
    }
    
};
