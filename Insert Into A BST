TC = O(Logn)
SC = O(1)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if(root==NULL){
            return new TreeNode(val);
        }
        TreeNode* curr = root;
        while(true){
            
            if(curr->val>val){
                if(curr->left!=NULL){
                    curr= curr->left;
                }
                else{
                    curr->left = new TreeNode(val);
                    break;
                }
            }
            else{
                if(curr->right!= NULL){
                    curr= curr->right;
                }
                else{
                    curr->right = new TreeNode(val);
                    break;
                }
            }
        }
        return root;
        
    }
};


GFG Solution 
isme key need not to be unique.

Node* insert(Node* root, int Key) {
    // Your code here
    if(root==NULL){
        return new Node(Key);
        //return root;
    }
    Node*curr = root;
    
    while(true){
        if(Key == curr->data) break;
        if(Key<curr->data){
            if(curr->left!=NULL){
                //if(curr->data == Key ) break;
                curr= curr->left;
                
            }
            //curr= curr->left;
            else{
                curr->left = new Node(Key);
                break;
            }
        }
            
        else{
            if(curr->right!=NULL ){
                //if(curr->data == Key) break;
                curr=curr->right;
                    
            }
                
            else{
                curr->right = new Node(Key);
                break;
            }

                
            
        }
    }
    return root;
}

