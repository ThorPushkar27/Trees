TC = O(n)
SC = O(n)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        TreeNode* root = buildTreeHelper(inorder, postorder, 0, inorder.size()-1, 0, postorder.size()-1);
        return root;
        
    }

    TreeNode* buildTreeHelper(vector<int>&inorder, vector<int>&postorder, int instart, int inend, int poststart, int postend){
        if(instart>inend) return NULL;
        int rootval = postorder[postend];
        TreeNode* root = new TreeNode(rootval);
        int inIndex;
        for(int i = instart; i<inend; i++){
            if(inorder[i]== rootval){
                inIndex = i;
                break;
            }
        }
        int leftTree = inIndex- instart;
        int rightTree = inend-inIndex;

        root->left = buildTreeHelper(inorder, postorder, instart, inIndex-1,poststart,poststart+leftTree-1);
        root->right = buildTreeHelper(inorder, postorder, inIndex+1, inend,postend- rightTree,postend-1);
        return root;


    }
