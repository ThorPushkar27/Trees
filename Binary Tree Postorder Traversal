class Solution {
public:
    vector<int>ans;
    vector<int> postorderTraversal(TreeNode* root) {
        if(root == NULL){
            return ans;
        }
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        ans.push_back(root->val);
        return ans;
        
    }
};


TC = O(n)
SC = O(n)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        stack<TreeNode*>st1;
        stack<TreeNode*>st2;
        vector<int>post;
        if(root==NULL){
            return post;
        }
        st1.push(root);
        while(st1.empty()==false){
            root = st1.top();
            st2.push(root);
            st1.pop();
            if(root->left!=NULL){
                st1.push(root->left);
            }
            if(root->right!=NULL){
                st1.push(root->right);
            }
        }
        while(st2.empty()==false){
            TreeNode* node = st2.top();
            st2.pop();
            post.push_back(node->val);
        }

        
        return post;
        
    }
};


PostOrder Traversal using 1 stack
TC = O(2n)
SC = O(n)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        stack<TreeNode*>st;
        vector<int>post;
        TreeNode* curr = root;
        while(curr!=NULL || st.empty()==false){
            if(curr!=NULL){
                st.push(curr);
                curr = curr->left;
            }
            else{
                TreeNode* temp = st.top()->right;
                if(temp==NULL){
                    temp = st.top();
                    st.pop();
                    post.push_back(temp->val);
                    while(st.empty()==false && temp== st.top()->right){
                        temp= st.top();
                        st.pop();
                        post.push_back(temp->val);
                    }
                }
                else{
                    curr = temp;
                }
            }
            
        }
        return post;
        
    }
};
