TC = O(N)
SC = O(N) // Auxilliary space used in recurrsion

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool helpermatch(TreeNode * root1, TreeNode* root2){
        if(root1!= NULL && root2!= NULL){
            bool a = helpermatch(root1->left,root2->right);
            bool b = helpermatch(root1->right,root2->left);

            if(root1->val == root2->val && a && b){
                return true;
            }
            else{
                return false;
            }
        }
        if(root1 == NULL && root2 == NULL){
            return true;
        }
        else{
            return false;
        }

    }
    bool isSymmetric(TreeNode* root) {
        TreeNode* root1 = root->left;
        TreeNode* root2 = root->right;
        bool x = helpermatch(root1,root2);
        if(x== true){
            return true;
        }
        return false;
        
    }
};
