TC = O(n)
SC = O(n)
USED LEVELORDERTRAVERSAL USING INDEXING COMMONLLY USED IN SEGMENT TREES.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root== NULL){
            return 0;
        }
        int ans=0;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        int first,last;
        while(q.empty()==false){
            int size =q.size();
            int minn  = q.front().second;
            for(int i =0; i<size; i++){
                int curr_id = q.front().second - minn;
                TreeNode* node = q.front().first;
                q.pop();
                if(i==0) first = curr_id;
                if(i== size-1) last = curr_id;
                if(node->left!= NULL){
                    q.push({node->left, (long long)curr_id*2+1});
                }
                if(node->right!= NULL){
                    q.push({node->right,(long long)curr_id*2+2});
                }

            }
            ans = max(ans, last- first+1);
        }
        return ans;
        
    }
};
