TC =O(n)
SC = O(n)


Ye wala code bahut difficult hai.

class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int,int>m;
        for(int i =0; i<inorder.size(); i++){
            m[inorder[i]] = i;
        }
        TreeNode* root = buildTree(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,m);
        return root;
        
    }

    TreeNode* buildTree(vector<int>&preorder, int prestart, int preend, vector<int>&inorder, int instart, int inend, map<int,int>&m){
        if(prestart>preend || instart> inend) return NULL;
        TreeNode* root = new TreeNode(preorder[prestart]);
        int inRoot = m[root->val];
        int numleft = inRoot - instart;
        root->left = buildTree(preorder,prestart+1,prestart+numleft, inorder, instart,inRoot -1, m);
        root->right = buildTree(preorder,prestart+numleft+1,preend, inorder, inRoot+1,inend, m); 
        return root;
    }
};


Easy Approach

class Solution {
public:
    int preIndex = 0;
    
    TreeNode* buildTreeHelper(vector<int>& preorder, vector<int>& inorder, int instart, int inend){
        if(instart> inend) return NULL;
        TreeNode* root = new TreeNode(preorder[preIndex]);
        preIndex++;

        int inIndex;
        for(int i =instart; i<inend; i++){
            if(inorder[i]== root->val ){
                inIndex = i;
                break;
            }
        }
        root->left = buildTreeHelper(preorder, inorder,instart, inIndex-1);
        root->right = buildTreeHelper(preorder, inorder, inIndex+1, inend);
        return root;

    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode* root = buildTreeHelper(preorder,inorder,0,inorder.size()-1);
        return root;
        
    }
};
